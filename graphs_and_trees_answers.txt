1.What is a binary tree and what makes it unique to other trees?

Binary trees are data structures that allow developers to run quick
searches. Each node in the tree may point to a left and a right child.
What makes them unique is their ordering of nodes and organization,
making them powerful searching structures.

2.What is a heuristic?

It is an algorithm's best guess(es), in order to circumvent the problem
of infinite choices. Accuracy is sacrificed for time efficiency.

3.What is another problem besides the shortest-path problem that requires the use of heuristics?

Artificial Intelligence algorithms based on machine learning where the computer builds up a knowledge base
from previous experiences is another application of heuristic algorithms. The algorithm uses
a self-maintained knowledge base to inform decisions and make “educated guesses” based on previous experiences.

4.What is the difference between a depth-first search and a breadth-first search?

Depth-first searches travel down a single branch until it finds the element. If none are found,
it traverses back up the parent searching unvisited nodes. Breadth-first searches
travel entire rows in searches, proceeding downwards to lower levels until the element is found.

5.Explain in your own words what an undirected, a-cyclic, unweighted graph is.

An undirected graph does not have a set direction, as nodes are ambiguous. A-cyclic refers
to graphs that do not form loops and result in a dead end. Unweighted graphs do not
assign a value to the cost of traveling between nodes. An undirected, a-cyclic, unweighted
graph would have all of these traits.

6.What kind of graph is a binary search tree?

A directed, a-cyclic, unweighted graph.



1.Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.


function checkNode(start, value) {
  let currentNode = start;

  while(currentNode != null) {
    if(currentNode.value === value) {
      return true;
    } else if (currentNode.value > value) {
        currentNode = currentNode.left;
    } else {
        currentNode = currentNode.right;
    }
  }
  return false;
}

2.Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

function findDistance(root, n) {
   let distance = 0;
   if (n < root) {
     distance++;
     return findDistance(root.left, n)
   }
   if (n > root) {
     distance++;
     return findDistance(root.right, n)
   }
   else {
     return root;
   }
 return distance;
}

function distance(root, n, m) {
  let lca = findLCA(root, n, m)
  return findDistance(lca, n) + findDistance(lca, m)
}

function findLCA(root, n, m) {
  if (n && m < root) {
    return findLCA(root.left, n, m)
  }
  if (n && m > root) {
    return findLCA(root.right, n, m)
  }
  else {
    return root;
  }
}
