1. In your own words, explain what clean code is and why it is important.
2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of
   the topics discussed, think about another commonly used object that relies on computers and explain what
   would happen if the code was not created to an acceptable standard.
3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.



1. Clean code is code that is concise, non-redundant, and self-explanatory. It is important because code
   is often managed over time and by multiple people, so having code that is clean allows easier maintenance
   and improved readability for others.

2. Breathing instruments/devices that involve filling a patient's lungs with oxygen. Any sort of bad practices
   that lead to the machine malfunctioning could be deadly if the device fails.

3. The code looks clean. Each If Statement is handling a separate condition, and setting a separate condition.

4. The PRINT percentage is in the wrong place after the end of an IF Statement. It should print the percentage
   shown by the SET code.

   FUNCTION calcPercent(sum, total)
     IF NOT(total = 0) THEN
       SET percentage to sum / total * 100
       PRINT percentage
     ELSE
       PRINT "Sorry, cannot divide by 0"
     END IF
   END FUNCTION

5.
 a.
  FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
     PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)
     CALL getPayment RETURNING amount
       IF paymentType = 'CASH' THEN
         PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
       ELSE IF paymentType = 'CREDIT CARD' THEN
         PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
       END IF
  END FUNCTION

b.
  FUNCTION checkoutBook(book, guest)
     IF guest.accountActive AND IF NOT(guest.hasOverdueBooks) AND IF guest.outstandingFees = 0 THEN
        APPEND book to guest.books
        SET book.status to "Checked Out"
        PRINT "Your books have been issued."
     ELSE
        PRINT "Unable to check out book."
     END IF
  END FUNCTION

c.
  CLASS BankAccount
    FUNCTION displayBalance
      PRINT balance
    END FUNCTION

    FUNCTION deposit(amount)
      SET balance to balance + amount
    END FUNCTION

    FUNCTION withdraw(amount)
       IF balance > amount THEN
         SET balance to balance - amount
       END
    END FUNCTION
  END CLASS

  CLASS Offers
    FUNCTION creditCardOffer
       IF NOT(customer.hasCreditCard) THEN
           CALL offerCreditCard
       END
    END FUNCTION

    FUNCTION checkStatus
       IF NOT(customer.hasCheckingAccount) THEN
           CALL offerCheckingAccount
       END
    END FUNCTION
  END CLASS


6. Square. Given an array of integers, find out whether the sum of the integers is a perfect square.
   If it is a perfect square, return the square root, otherwise return the sum.

   var array = [2,4,9,5,1];

   function sumIntegers(array) {
     var sum = 0;
     for (let i = 0; i < array.length; i++) {
       sum = sum + array[i];
     }
     return sum;
   }

   var summedIntegers = sumIntegers();

   function isPerfectSquare(summedIntegers) {
     if ( Math.sqrt(summedIntegers) % 1 === 0 ) {
      return Math.sqrt(summedIntegers);
     } else {
      return summedIntegers;
     }
   }


7. Duplicate. Given an array of integers, find out whether the array contains any duplicate elements.
   The function should return true if any value appears at least twice in the array, and false if every element is distinct.

   function isDuplicated(arr) {
     let seen = new Set();

     for(let i = 0; i < arr.length; i++) {
        if (seen.has(arr[i])) {
           return true;
        } else {
           seen.add(arr[i]);
        }
     }
     return false;
   }

   isDuplicated( [1,6,4,5,4,9,0] )
