What are some pros and cons of using linked lists instead of arrays?

Linked lists are able to have dynamic size due to its memory storage.
Also, because elements are not stored next to each other in memory,
they can be inserted and removed much easier than in an array. There
is no memory wasted. On the other hand, it is this location storage
that can be a drawback when it is time to access elements. They are
not indexed, thus searching must begin at the head node. Random access
is not allowed.


Come up with a real world example of a linked list.

The web browser history is an example of a linked list in usage.
Each site can be represented by a node. The linked list of webpages
would be traversed through previous and next pointers to location memory.



1. The linked list push function should take a value, create a node, and add it to the end
of a list. Below is pseudocode for a push function for a singly linked list. However, there
is something wrong with it. Submit both an explanation of the bug and a functional
implementation of the method.

The function is missing a while condition that occurs when the node is not null and
pointing to a node.


function push(element) {
   var node = {
       value = element,
       next = null
   };

   if ( this.head === null ) {
       this.head = node;
   } else {
       current = this.head;
       while(current.next) {
         current = current.next;    // current node will point to the next until it reaches last node
       }
       current.next = node;
   }
   return node;
}


2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d


function linkedList() {
  var head = null;

  var Node = function(data) {
    this.data = data;
    this.next = null;
  }

  this.head = function() {
    return head;
  }

  this.add = function(data) {
    var node = new Node(data);
    if (head === null) {
        head = node;
    } else {
        var current = head;
        while (current.next) {
          current = current.next;
        }
        current.next = node;
    }
    return node;
  }

  function contains(arr, element) {
  	for(var i = 0 ; i < arr.length; i++){
      if(arr.indexOf(element) > -1 ) {
        return true;
      } else {
        return false;
      }
    }
  }

  this.removeDuplicates = function(data) {
    let seen = [];
    let previous = null;
    let current = head;

    while (current !== null) {
     if (contains(seen, current.data)) {
  		previous.next = current.next;
  	 } else {
  		seen.push(current.data);
  	    previous = current;
     }
  	   current = current.next;
     }
  }
}

var ll = new linkedList();
ll.add(1);
ll.add(3);
ll.add(3);
ll.add(5);
ll.removeDuplicates(ll.head())
console.log(ll.head()) // (1) -> (3) -> (5)


3.Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a


function linkedList() {
  var head = null;

  var Node = function(data) {
    this.data = data;
    this.next = null;
  }

  this.head = function(data) {
    return head;
  }

  this.add = function(data) {
    var node = new Node(data);

    if (head === null) {
      head = node;
    } else {
      var current = head;
      while (current.next) {
         current = current.next;
      }
      current.next = node;
    }
    return node;
  }

  this.reverseList = function(data) {
    let nodeStack = [];
    let current = head;
    let previous = null;

    while(current) {
      nodeStack.push(current)
      previous = current;
      current = current.next;
    }
    console.log(nodeStack);

    let reversedList = [];

    while(nodeStack.length !== 0) {
      let r = nodeStack.pop();
      reversedList.push(r);
     }
    return reversedList;
  }
}

var ll = new linkedList();
ll.add(1);
ll.add(2);
ll.add(3);
ll.add(4);
ll.add(5);
console.log(ll.reverseList(ll.head())) // (5) -> (4) -> (3) ...
