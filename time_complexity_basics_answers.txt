1.What is time complexity and what is its relation to algorithms?

Time complexity measures the time it takes to execute a program. It is expressed as a function.
Time complexity measures the physical duration of an algorithm.

2.What is runtime?

Runtime is the physical time duration of an algorithm.

3.How is the runtime of an algorithm calculated?

It is determined as a function of the size of its input. All of the algorithms instructions are
added up. The expression is simplified to its largest term, and any constants are dropped of.

4.Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most
efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in
the correct spot in your list.

1. O(1) - constant growth rate
2. O(log n) - logarithmic growth rate
3. O(n) - linear growth rate
4. O(n log n) - log linear growth rate
5. O(n^2) - quadratic growth rate
6. O(n^3) - cubic growth rate
7. O(2^n) - exponential growth rate


5.Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

Exponential growth rates can be seen in population growth. A graph represented with time on the x-axis and human
population on the y-axis shows that throughout time, growth has been been relatively steady until recent times.
Around the 1900s, the population has grown steeper in relation to time, and is projected to grow exponentially, almost
doubling by the year 2100.

6.Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array     //  runs n amount of times, n is equal to array length
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

Runtime: 0(n)


7.Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

Runtime: O(n^2)


8.Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

Runtime: O(2^n)


9.Out of the code snippets you just saw, which is the most time efficient?

The linear growth rate is the most efficient, O(n). It runs a single for loop.
